/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package futurepath.chat.server.view;

import futurepath.chat.server.controller.Connection;
import futurepath.chat.server.exceptions.numberOfRoomsTooBigException;
import futurepath.chat.server.exceptions.numberOfRoomsTooSmallException;
import futurepath.chat.server.exceptions.numberOfUsersTooBigException;
import futurepath.chat.server.exceptions.numberOfUsersTooSmallException;
import java.awt.Color;
import java.awt.Dimension;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Angela Serrano
 */
public class ControlPanelView extends javax.swing.JFrame {

    private Connection t;

    /**
     * Creates new form ControlPanelView
     */
    public ControlPanelView() {
        initComponents();
        Dimension d = new Dimension(375, 275);
        setSize(d);
        setPreferredSize(d);
        setMinimumSize(d);
        setResizable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        roomsActiveTF = new javax.swing.JTextField();
        usersPerRoomTF = new javax.swing.JTextField();
        connectBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel.setLayout(null);

        jLabel1.setText("Max. number of rooms active:");
        jPanel.add(jLabel1);
        jLabel1.setBounds(50, 50, 200, 16);

        jLabel2.setText("Max. number of users per room:");
        jPanel.add(jLabel2);
        jLabel2.setBounds(50, 90, 190, 16);

        roomsActiveTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomsActiveTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomsActiveTFActionPerformed(evt);
            }
        });
        jPanel.add(roomsActiveTF);
        roomsActiveTF.setBounds(270, 42, 30, 30);

        usersPerRoomTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        usersPerRoomTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersPerRoomTFActionPerformed(evt);
            }
        });
        jPanel.add(usersPerRoomTF);
        usersPerRoomTF.setBounds(270, 82, 30, 30);

        connectBT.setBackground(new java.awt.Color(97, 204, 144));
        connectBT.setText("Connect");
        connectBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBTActionPerformed(evt);
            }
        });
        jPanel.add(connectBT);
        connectBT.setBounds(90, 170, 170, 50);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomsActiveTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomsActiveTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomsActiveTFActionPerformed

    private void connectBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBTActionPerformed

        try {
            if (roomMaxMin() && usersMaxMin()) {

                int numberOfRooms = Integer.parseInt(roomsActiveTF.getText());
                int numberOfUsers = Integer.parseInt(usersPerRoomTF.getText());

                if (connectBT.getText().equals("Connect")) {
                    try {
                        //conectar el servidor con los par√°metros
                        t = new Connection(numberOfRooms, numberOfUsers);
                        t.start();

                    } catch (IOException ex) {
                        Logger.getLogger(ControlPanelView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    connectBT.setText("Disconnect");
                    connectBT.setBackground(new Color(204, 96, 96));
                    roomsActiveTF.setEditable(false);
                    usersPerRoomTF.setEditable(false);
                } else {
                    t.close();
                    connectBT.setText("Connect");
                    connectBT.setBackground(new Color(97, 204, 144));
                    roomsActiveTF.setEditable(true);
                    usersPerRoomTF.setEditable(true);
                }
            }
        } catch (numberOfRoomsTooBigException | numberOfRoomsTooSmallException | numberOfUsersTooSmallException | numberOfUsersTooBigException ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(ControlPanelView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_connectBTActionPerformed

    private void usersPerRoomTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersPerRoomTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usersPerRoomTFActionPerformed

    private boolean roomMaxMin() throws numberOfRoomsTooBigException, numberOfRoomsTooSmallException {
        try {
            if (Integer.parseInt(roomsActiveTF.getText()) < 1) {
                throw new numberOfRoomsTooSmallException();
            } else if (Integer.parseInt(roomsActiveTF.getText()) > 20) {
                throw new numberOfRoomsTooBigException();
            } else {
                return true;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Please, introduce a correct value", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    private boolean usersMaxMin() throws numberOfUsersTooSmallException, numberOfUsersTooBigException {
        try {
            if (Integer.parseInt(usersPerRoomTF.getText()) < 2) {
                throw new numberOfUsersTooSmallException();
            } else if (Integer.parseInt(usersPerRoomTF.getText()) > 50) {
                throw new numberOfUsersTooBigException();
            } else {
                return true;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Please, introduce a correct value", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPanelView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPanelView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPanelView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPanelView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlPanelView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel;
    private javax.swing.JTextField roomsActiveTF;
    private javax.swing.JTextField usersPerRoomTF;
    // End of variables declaration//GEN-END:variables
}
